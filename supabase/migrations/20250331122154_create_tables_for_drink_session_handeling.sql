create table "public"."consumptions" (
    "id" bigint generated by default as identity not null,
    "drink_id" uuid not null,
    "drink_session_id" uuid not null,
    "start_time" timestamp with time zone not null,
    "end_time" timestamp with time zone not null default now(),
    "volume" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."consumptions" enable row level security;

create table "public"."drink_sessions" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null default auth.uid(),
    "name" text not null,
    "note" text,
    "start_time" timestamp with time zone not null,
    "end_time" timestamp with time zone not null default now(),
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."drink_sessions" enable row level security;

create table "public"."drinks" (
    "id" uuid not null default gen_random_uuid(),
    "alcohol" double precision not null,
    "default_volume" bigint not null,
    "barcode" text,
    "created_by" uuid default auth.uid(),
    "type" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."drinks" enable row level security;

CREATE UNIQUE INDEX consumptions_pkey ON public.consumptions USING btree (id);

CREATE UNIQUE INDEX drink_sessions_pkey ON public.drink_sessions USING btree (id);

CREATE UNIQUE INDEX drinks_barcode_key ON public.drinks USING btree (barcode);

CREATE UNIQUE INDEX drinks_pkey ON public.drinks USING btree (id);

alter table "public"."consumptions" add constraint "consumptions_pkey" PRIMARY KEY using index "consumptions_pkey";

alter table "public"."drink_sessions" add constraint "drink_sessions_pkey" PRIMARY KEY using index "drink_sessions_pkey";

alter table "public"."drinks" add constraint "drinks_pkey" PRIMARY KEY using index "drinks_pkey";

alter table "public"."consumptions" add constraint "consumptions_drink_id_fkey" FOREIGN KEY (drink_id) REFERENCES drinks(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."consumptions" validate constraint "consumptions_drink_id_fkey";

alter table "public"."consumptions" add constraint "consumptions_drink_session_id_fkey" FOREIGN KEY (drink_session_id) REFERENCES drink_sessions(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."consumptions" validate constraint "consumptions_drink_session_id_fkey";

alter table "public"."drink_sessions" add constraint "drink_sessions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."drink_sessions" validate constraint "drink_sessions_user_id_fkey";

alter table "public"."drinks" add constraint "drinks_barcode_key" UNIQUE using index "drinks_barcode_key";

alter table "public"."drinks" add constraint "drinks_created_by_fkey" FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."drinks" validate constraint "drinks_created_by_fkey";

grant delete on table "public"."consumptions" to "anon";

grant insert on table "public"."consumptions" to "anon";

grant references on table "public"."consumptions" to "anon";

grant select on table "public"."consumptions" to "anon";

grant trigger on table "public"."consumptions" to "anon";

grant truncate on table "public"."consumptions" to "anon";

grant update on table "public"."consumptions" to "anon";

grant delete on table "public"."consumptions" to "authenticated";

grant insert on table "public"."consumptions" to "authenticated";

grant references on table "public"."consumptions" to "authenticated";

grant select on table "public"."consumptions" to "authenticated";

grant trigger on table "public"."consumptions" to "authenticated";

grant truncate on table "public"."consumptions" to "authenticated";

grant update on table "public"."consumptions" to "authenticated";

grant delete on table "public"."consumptions" to "service_role";

grant insert on table "public"."consumptions" to "service_role";

grant references on table "public"."consumptions" to "service_role";

grant select on table "public"."consumptions" to "service_role";

grant trigger on table "public"."consumptions" to "service_role";

grant truncate on table "public"."consumptions" to "service_role";

grant update on table "public"."consumptions" to "service_role";

grant delete on table "public"."drink_sessions" to "anon";

grant insert on table "public"."drink_sessions" to "anon";

grant references on table "public"."drink_sessions" to "anon";

grant select on table "public"."drink_sessions" to "anon";

grant trigger on table "public"."drink_sessions" to "anon";

grant truncate on table "public"."drink_sessions" to "anon";

grant update on table "public"."drink_sessions" to "anon";

grant delete on table "public"."drink_sessions" to "authenticated";

grant insert on table "public"."drink_sessions" to "authenticated";

grant references on table "public"."drink_sessions" to "authenticated";

grant select on table "public"."drink_sessions" to "authenticated";

grant trigger on table "public"."drink_sessions" to "authenticated";

grant truncate on table "public"."drink_sessions" to "authenticated";

grant update on table "public"."drink_sessions" to "authenticated";

grant delete on table "public"."drink_sessions" to "service_role";

grant insert on table "public"."drink_sessions" to "service_role";

grant references on table "public"."drink_sessions" to "service_role";

grant select on table "public"."drink_sessions" to "service_role";

grant trigger on table "public"."drink_sessions" to "service_role";

grant truncate on table "public"."drink_sessions" to "service_role";

grant update on table "public"."drink_sessions" to "service_role";

grant delete on table "public"."drinks" to "anon";

grant insert on table "public"."drinks" to "anon";

grant references on table "public"."drinks" to "anon";

grant select on table "public"."drinks" to "anon";

grant trigger on table "public"."drinks" to "anon";

grant truncate on table "public"."drinks" to "anon";

grant update on table "public"."drinks" to "anon";

grant delete on table "public"."drinks" to "authenticated";

grant insert on table "public"."drinks" to "authenticated";

grant references on table "public"."drinks" to "authenticated";

grant select on table "public"."drinks" to "authenticated";

grant trigger on table "public"."drinks" to "authenticated";

grant truncate on table "public"."drinks" to "authenticated";

grant update on table "public"."drinks" to "authenticated";

grant delete on table "public"."drinks" to "service_role";

grant insert on table "public"."drinks" to "service_role";

grant references on table "public"."drinks" to "service_role";

grant select on table "public"."drinks" to "service_role";

grant trigger on table "public"."drinks" to "service_role";

grant truncate on table "public"."drinks" to "service_role";

grant update on table "public"."drinks" to "service_role";

create policy "Enable all based on user_id from drink session table"
on "public"."consumptions"
as permissive
for all
to authenticated
using ((drink_session_id IN ( SELECT drink_sessions.id
   FROM drink_sessions
  WHERE (drink_sessions.user_id = auth.uid()))))
with check ((drink_session_id IN ( SELECT drink_sessions.id
   FROM drink_sessions
  WHERE (drink_sessions.user_id = auth.uid()))));


create policy "Enable all actions for users based on user_id"
on "public"."drink_sessions"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on created_by"
on "public"."drinks"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = created_by));


create policy "Enable insert for authenticated users only"
on "public"."drinks"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for authenticated users based on who created"
on "public"."drinks"
as permissive
for select
to authenticated
using (((created_by IS NULL) OR (( SELECT auth.uid() AS uid) = created_by)));

comment on column "public"."consumptions"."volume" is 'Volume in milliliters';
comment on column "public"."drinks"."alcohol" is 'Alcohol percentage';
comment on column "public"."drinks"."default_volume" is 'Default volume in milliliters';


