create table "public"."drink_barcodes" (
    "id" bigint generated by default as identity not null,
    "drink_id" uuid not null,
    "barcode" text not null,
    "created_at" timestamp with time zone not null default now()
);

-- Migrate barcodes from drinks to drink_barcodes
insert into
    "public"."drink_barcodes" (
        "drink_id",
        "barcode",
        "created_at"
    )
select drinks.id, drinks.barcode, drinks.created_at
from "public"."drinks"
where
    "public"."drinks".barcode is not null;

alter table "public"."drinks" drop constraint "drinks_barcode_key";

drop index if exists "public"."drinks_barcode_key";

alter table "public"."drinks" drop column "barcode";

CREATE UNIQUE INDEX drink_barcodes_pkey ON public.drink_barcodes USING btree (id);

alter table "public"."drink_barcodes"
add constraint "drink_barcodes_pkey" PRIMARY KEY using index "drink_barcodes_pkey";

alter table "public"."drink_barcodes"
add constraint "drink_barcodes_drink_id_fkey" FOREIGN KEY (drink_id) REFERENCES drinks (id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."drink_barcodes" validate constraint "drink_barcodes_drink_id_fkey";

grant delete on table "public"."drink_barcodes" to "anon";

grant insert on table "public"."drink_barcodes" to "anon";

grant references on table "public"."drink_barcodes" to "anon";

grant select on table "public"."drink_barcodes" to "anon";

grant trigger on table "public"."drink_barcodes" to "anon";

grant truncate on table "public"."drink_barcodes" to "anon";

grant update on table "public"."drink_barcodes" to "anon";

grant delete on table "public"."drink_barcodes" to "authenticated";

grant insert on table "public"."drink_barcodes" to "authenticated";

grant references on table "public"."drink_barcodes" to "authenticated";

grant select on table "public"."drink_barcodes" to "authenticated";

grant trigger on table "public"."drink_barcodes" to "authenticated";

grant truncate on table "public"."drink_barcodes" to "authenticated";

grant update on table "public"."drink_barcodes" to "authenticated";

grant delete on table "public"."drink_barcodes" to "service_role";

grant insert on table "public"."drink_barcodes" to "service_role";

grant references on table "public"."drink_barcodes" to "service_role";

grant select on table "public"."drink_barcodes" to "service_role";

grant trigger on table "public"."drink_barcodes" to "service_role";

grant truncate on table "public"."drink_barcodes" to "service_role";

grant update on table "public"."drink_barcodes" to "service_role";

alter table "public"."drink_barcodes" enable row level security;

create policy "Enable delete for users based on user_id" on "public"."drink_barcodes" as permissive for delete to public using (
    (
        EXISTS (
            SELECT 1
            FROM drinks d
            WHERE (
                    (
                        d.id = drink_barcodes.drink_id
                    )
                    AND (d.created_by = auth.uid ())
                )
        )
    )
);

create policy "Enable insert for authenticated users only" on "public"."drink_barcodes" as permissive for insert to authenticated
with
    check (true);

create policy "Read barcodes of public or own drinks" on "public"."drink_barcodes" as permissive for
select to authenticated using (
        (
            EXISTS (
                SELECT 1
                FROM drinks d
                WHERE (
                        (
                            d.id = drink_barcodes.drink_id
                        )
                        AND (
                            (d.created_by IS NULL)
                            OR (d.created_by = auth.uid ())
                        )
                    )
            )
        )
    );